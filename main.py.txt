import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import random
import asyncio
import os

TOKEN = os.environ.get("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

users = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users[user_id] = {"score": 0, "target": 0, "task": None}
    await update.message.reply_text("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –ù–∞–∂–º–∏ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

async def play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    target = random.randint(1, 9)
    users[user_id]["target"] = target
    await update.message.reply_text(f"üéØ –¢–≤–æ—è —Ü–µ–ª—å: –Ω–∞–∂–∞—Ç—å –°–¢–û–ü –Ω–∞ —á–∏—Å–ª–µ {target}")
    users[user_id]["task"] = context.application.create_task(spin(update, context, user_id))

async def spin(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    chat_id = update.effective_chat.id
    for _ in range(30):
        number = random.randint(1, 9)
        keyboard = [
            [InlineKeyboardButton("–°–¢–û–ü", callback_data=str(number))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await context.bot.send_message(chat_id=chat_id, text=f"üî¢ {number}", reply_markup=reply_markup)
        await asyncio.sleep(1)

    await context.bot.send_message(chat_id=chat_id, text=f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –¢–≤–æ–π —Å—á—ë—Ç: {users[user_id]['score']}")

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if user_id not in users:
        await query.edit_message_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    selected = int(query.data)
    target = users[user_id]["target"]

    if selected == target:
        users[user_id]["score"] += 1
        await query.edit_message_text(f"‚úÖ –£–≥–∞–¥–∞–ª! –°—á—ë—Ç: {users[user_id]['score']}")
    else:
        await query.edit_message_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ë—ã–ª–æ: {selected}. –¶–µ–ª—å: {target}. –°—á—ë—Ç: {users[user_id]['score']}")
    
    if users[user_id]["task"]:
        users[user_id]["task"].cancel()

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("play", play))
    app.add_handler(CallbackQueryHandler(button))
    app.run_polling()

if __name__ == "__main__":
    main()